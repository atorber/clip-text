# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flutter CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      # Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      # Verify Flutter version
      - name: Verify Flutter version
        run: |
          flutter --version
          dart --version

      - name: Install dependencies
        run: flutter pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: flutter analyze

      # Run tests
      - name: Run tests
        run: flutter test

  build-apk:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4

      # Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      # Verify Flutter version
      - name: Verify Flutter version
        run: |
          flutter --version
          dart --version

      # Setup Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install dependencies
        run: flutter pub get

      # Build APK
      - name: Build APK
        run: flutter build apk --release --no-tree-shake-icons

      # Get version from pubspec.yaml
      - name: Get version
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Rename APK file
      - name: Rename APK file
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/clip-text-flutter-${{ steps.version.outputs.version }}.apk

      # Upload APK to release
      - name: Upload APK to Release
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/flutter-apk/clip-text-flutter-${{ steps.version.outputs.version }}.apk
          tag_name: ${{ github.event.release.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

      # Backup upload method using GitHub CLI
      - name: Upload APK using GitHub CLI (backup)
        if: failure()
        run: |
          gh release upload ${{ github.event.release.tag_name }} build/app/outputs/flutter-apk/clip-text-flutter-${{ steps.version.outputs.version }}.apk --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
